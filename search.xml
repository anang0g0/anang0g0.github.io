<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>theme</title>
      <link href="2021/05/03/theme/"/>
      <url>2021/05/03/theme/</url>
      
        <content type="html"><![CDATA[<p>今までの開発を発展させたオリジナルのテーマを思いついた。（１変数多項式を使った符号の一種）<br />符号の多重線形写像の続きをやるか、Wild McElieceをやるか、リスト復号をやるかいろいろと迷う。符号ばっかりｗ</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>diary-2021</title>
      <link href="2021/05/03/diary-2021/"/>
      <url>2021/05/03/diary-2021/</url>
      
        <content type="html"><![CDATA[<p>20210430 根性でバグをとった。 途中まで闇雲にいじっていて、4時過ぎに同じデータで正解と誤解で途中計算を比較をすればいい（トレース）という事に気づいてそれから一気に片付けた。 3重とか4重くらいのバグをかいくぐって正解にたどり着くのは、まるで登山でもしているかのようだ。 3日がかりだったけどなんとかなった。 これでセンドリエが使えるようになる。 公開鍵は半分のサイズ。(op.c)</p><p>20210429 Berlekamp-Masseyでも復号できるようになった。(op.c) sentrierを使っていないので、パリティ検査行列は通常サイズ。</p><p>20210428 EEAとBMの両方でスピードを比較した。</p><p>EEA:1min23s BM :1min35s</p><p>というわけで実用サイズで(n,k,t)=(8192,256 * 13,128)の鍵生成から復号までの時間は両方とも大して変わらず遅かった。 今の所どちらを選択すべきかはっきりと言えない。 ただ、BMの方が符号の構造が単純なので公開鍵のサイズを小さくできる利点がある。</p><p>既約Goppa符号からseparable Goppa符号に変更。 特にこだわりがなければ、鍵計算の速度が早くなりました。</p><p>Niederreiter暗号はそのままだと致命的な攻撃が存在するので安全ではない。 これを安全な暗号のクラスであるIND-CCA2にするためには暗号文に加工しなければならない。 ここではその一つの案を述べる。</p><p>暗号化 c1=eH c2=Gen(Hash(e))⊕m c3=Hash(c1‖c2‖e‖m)</p><p>c=(c1,c2,c3)</p><p>ここでGenは疑似乱数生成器、 Hashはハッシュ関数 mは平文 cは暗号文 eはエラーベクトル rはシード Hは公開鍵とする。</p><p>Berlekamp-Massey法（BM法）はop.cにありますが、パリティ検査行列の構造が違うらしくEEAと互換性がありません。 BM法では検査行列の半分を公開すればよく、多項式を使わないでシンドロームの値だけからエラー位置を計算するのでEEAの２倍以上高速です。 終了条件をよく理解しないまま実装しているので、バグがあるかもしれません。 なので当面BM法については改良を進める方針です。 どんな攻撃画があるかについてはまだ未調査なんですが、調べてみるとTiming Attackとかにパターソンアルゴリズムが弱いとか いろいろ暗号文以外にも気をつけないといけないらしくそこまで実装が追いつかないというのが現状です。 つまり素のままの実装が今なのでいろいろ付け足していこうかと思います。 それにしても論文が多すぎる。</p><p>20210426 符号ベースの認証方式を作ってみたけど誰も見に来ないので寂しいｗ</p><p>20210424 速度比較。 ５エラー訂正で１００００回ループして４秒ちょっと。 バグがまだ生きていたので潰した。 この先はこんな感じでやりたい。</p><p>20210423 バグにとどめを刺した。 そして急にやることがなくなったｗ． 本当はあるんだけど、暗号化は人任せって言うわけじゃだめですかね？ https://www.ipa.go.jp/security/fy12/report/ninsyou.pdf</p><p>急にやることがなくなったので、数学と英語の勉強をします。</p><p>20210420 シンドローム２倍関数を一般化した。 t=128まで訂正可能。 ０の位置以外訂正できている。（これは修正する必要がある）</p><p>でも先生の言ってることじゃなくて、独自解釈して論文に書いてある通りHからH2を作ってそれで訂正している。</p><p>私の解釈はこれ。 https://qiita.com/fumumue/items/1da3219099c8d1679cce</p><p>私が見たのはこれ。 https://eprint.iacr.org/2017/1180.pdf</p><p>今日になってこんなのも見つかった。 https://www.iacr.org/archive/ches2017/10529219/10529219.pdf</p><p>うまく行っているのはまぐれだった可能性が高い。 というのも、復号する時２倍してしまったら、それはirreducible Goppaではなく、separable Goppaになってしまうのではないか？という不安だ。 論文にはちゃんとg(x)をg(x)^2するって書いてある。 そしてそれでうまく訂正できているのだから一見して何も問題がないように見える。</p><p>先生はg(x)で作っているものとg(x)^2の違いがわかっていないと言っていた。</p><p>これがセンドリエのトリックと言われているものかどうかはわからないが、公開鍵を半分のサイズにしていることは確かだと思う。 だって奇数列だけ取り出してそれだけで符号化しているのだから。 そしてそのシンドロームを２倍して復号できるのだ。 そしてHはH^2と等価であると書いてある。（これはどういう意味？）</p><p>よくわからないのは、奇数列の２乗で偶数列が作れるという主張だ。 確かにリードソロモンだったら、a,a<sup>2,a</sup>3...となるからその主張は正しい。 でもGoppa符号では 1/g(x) がついてくるから、その奇数列を２乗して計算すると復号できなくなってしまう。 そのへんがよくわからない。(泣)</p><p>自分にとっては奇数列を２乗してできる符号はg(x)^2で作ったものを連想させる。 理解できないから独自解釈したら偶然それでうまく行ってしまったという感じ。</p><p>でも私にとっては奇数列だけ取り出すというアイデアは斬新なものだった。 偶数列から奇数列は作れないから。</p><p>ちょっと残念だけど、あれだけ質問しておいて私の頭では理解できないのかもしれない。</p><p>勉強しないと。</p><p>2021/04/19 2エラーしか訂正できなかったバグを修正。 global.hにあるKの値を変えれば4エラーまで訂正できます。（偶数列を復元する関数が８個決め打ちなので）</p><p>センドリエじゃないけど、奇数列だけからフルランクの検査行列を再構成して、シンドロームも正しく計算できるように改良した。 これでこのプロジェクトは完成する。 奇数行だけしか使わないことで公開鍵のサイズは、8192 * 129 * 13 ≒ 13737984bitになる。（パターソンの場合とほぼ同じサイズ）</p><p>シンドロームを一行ずつなら正しく計算できるのに、2行以上だとシンドロームの計算に失敗するという問題があった。 しかし1行づつなら計算できるので、少し掘り下げて考えてみた。 すると、行を足してから２倍にするのではなく、２倍にしてから足すように順番を入れ替えたら成功した。</p><p>このプログラムの裏には専門家の献身がある。</p><p>産業技術総合研究所の古原和邦様には、特別な感謝の気持とお礼を申し上げる。</p><p>彼の多大なアドバイスと、私の１００通以上にものぼるしつこい質問に真摯に向きあってくれた忍耐がなかったら、このプログラムは完成し得なかったか、大幅に遅れていただろう。 私の乏しい理解力では、検査行列を全て計算してから、奇数列だけを抜き出すのだというトリックをなかなか理解できなかった。 特に添え字の意味が理解できず、説明が大変だったと思う。（先生の言うことを正しく理解してなくて独自解釈の結果うまくいってるだけかもしれないがｗ）</p><p>古原先生のおかげで私のやる気は最後まで衰えなかった。 あんなにメールをして申し訳なかったと思う。</p><p>この場を借りて謝罪したい。</p><p>20210418 やっぱり間違えていた。 多分プログラムが悪いか、私が理解してない可能性が高い。 なので紙に書いて、論文に書いてあることを自分なりに整理した。 センドリエのトリックはそんなに単純なものではないと思うし、偶数業を削除するなんて言う話は聞いたことがない。</p><p>勉強不足を感じた。</p><p>https://qiita.com/fumumue/items/1da3219099c8d1679cce</p><p>とりあえず今日勉強したことをQiitaに掲載した。 奇数の列だけから2倍の符号が構成できることがわかった。 これがそのままシンドロームにも適用できるなら、正しいことがわかるのだがなかなか理解できない。 シンドロームの合成については、あながち間違っていたとも言えない内容なので明日に希望をつなごう。</p><p>20210416 2倍のシンドロームの作り方がわからない。 翻訳しても具体例がないからわからない。 少なくとも次元を増やす前のシンドロームから2倍にしたときのシンドロームでは情報量が違っているので計算できないはず。 2つの符号が等価であることは、実際小さい符号から大きな符号を構成できることで確かめられる。 でもシンドロームはどう考えても等価じゃない。 シンドロームはどの位置にエラーがあるかわからない限り再構成できない。 次元の小さなパリティ検査行列に、訂正限界以上のエラーを入れても、2倍にすることができれば訂正できるようになるというのが誤解なのだろうか？ それならなぜわざわざ倍の大きさのシンドロームを計算するのか？ たしかに最初のシンドロームの各要素を2乗すれば、同じエラーを訂正できるシンドロームはできる。 でも訂正数が上がらなければ意味がない。 書いてあるとおりに最初ののシンドロームを拡大した検査行列に再入力すると、 今度は入力したシンドロームをエラーとして計算するシンドロームができてしまって意味がない。 最初は符号の代数的な構造を使って最初のシンドロームだけから構成できると思っていた。 しかし計算してみると0になる列が出てきて、掛け算じゃ出てこない値だったので諦めた。 パターソンも最初は何のことかわからなかった。</p><p>とりあえずセンドリエは放置。</p><p>BMおよびtエラー訂正分離可能なバイナリゴッパコードの最小距離は少なくともdmin = 2t 1であるため、パターソンアルゴリズムは、次数tのゴッパ多項式を持つゴッパコードのtエラーを訂正できます。 Berlekamp-Masseyアルゴリズムを使用して同じエラー訂正機能を実現する方法。これは、デフォルトでは、tエラー訂正を可能にするバイナリゴッパコードのプロパティを利用しません。</p><p>よく知られている等価性[MS78] Goppa（L、g（z））≡Goppa（L、g（z）2）（3.19）を使用すると、平方自由多項式g（z）に当てはまります。 Goppa（L、g（z）2）の2倍のサイズのパリティチェック行列に基づく次数2tのシンドローム多項式。 Berlekamp-Masseyアルゴリズムが一連のシンドローム方程式を設定することを思い出してください。そのうち、S1、。 。 。 、Stはデコーダーに認識されています。 g（z）2を法とするBMを使用すると、2tの既知のシンドローム方程式が生成されます。これにより、アルゴリズムはg（z）によって提供されるすべての固有情報を使用できます。 これにより、Berlekamp-Masseyアルゴリズムでtエラーを修正できます。これは、エラーロケーター多項式をPattersonアルゴリズムで奇数部分と偶数部分に分割することと本質的に同等であり、「新しい」キー方程式も生成されます。</p><p>バイナリNiederreiterへの適用残りの問題は、バイナリの場合にBMとNiederreiterを使用してtエラーをデコードすることです。 Niederreiter暗号システムは、コードワードではなく暗号文としてシンドロームを使用するため、GMモジュロg（z）2を使用して2倍のサイズのシンドロームを計算するアプローチは使用できません。 パターソンアルゴリズムはg（z）を超える標準コードサイズを使用してすべてのエラーを修正できることがわかっているため、暗号化プロセスでもg（z）2を超えるコードに完全に切り替えると、コードサイズが2倍になります。</p><p>代わりに、Heyseが[HG13]で説明しているアプローチを使用できます。誤ったコードワードˆcに対応する長さn − kのシンドロームsは、方程式s = Scˆ = eHTを満たすことに注意してください。ここで、eはsをデコードして取得したいエラーベクトルです。ここで、sを標準サイズの計算されたmodolu g（z）のシンドロームとします。 sの前にk個のゼロを付けることにより、長さnの（0 | s）を取得します。次に、式を使用します。 3.19 g（z）2を法とするパリティチェック行列H2を計算します。 deg（g（z）2）= 2tであるため、結果のパリティチェック行列の次元は2（n-k）×nになります。 （0 | s）・H2 = s2を計算すると、長さ2（n − k）の新しいシンドロームが生成され、非バイナリの場合と同様に、次数2t −1のシンドローム多項式が生成されます。 g（z）とg（z）2に対するゴッパ符号の同等性、および（0 | s）とeが同じ剰余類に属するという事実により、s2は依然としてˆcに対応し、同じ解eを持つシンドロームです。 。ただし、s2はキー方程式に適切な長さを持ち、Berlekamp-Masseyが完全なエラーベクトルeをデコードできるようにします。</p><p>シンドロームであるニーダーライター暗号文を目的の長さのシンドロームに変換して、BMデコーダーを使用してバイナリコードのtエラー訂正を実現する方法については、セクション3.4.3ですでに説明しています。 2倍の長さのシンドロームs2は、暗号文sの前にゼロを付けて、ベクトル（0 | s）がゼロになるようにすることで得られます。 したがって、乗算ではsの最後の（n-k）ビットのみを考慮する必要があり、H2の最後の（n-k）列のみが必要です。 したがって、リスト4.7に示すように、実装では、計算時間とメモリ効率を向上させるために、H2の必要な部分のみを構築します。</p><p>翻訳ソフトのおかげでございます。</p><p>20210415 代わりに、Heyseが[HG13]で説明しているアプローチを使用できます。誤ったコードワードˆcに対応する長さn − kのシンドロームsは、方程式s = Scˆ = eHTを満たすことに注意してください。ここで、eはsをデコードして取得したいエラーベクトルです。ここで、sを標準サイズの計算されたmodolu g（z）のシンドロームとします。 sにk個のゼロを付加することにより、長さnの（0 | s）を取得します。次に、式3.19を使用します。 g（z）^ 2を法とするパリティチェック行列H ^ 2を計算します。 deg（g（z）^ 2）= 2tであるため、結果のパリティチェック行列の次元は2（n-k）×nになります。 （0 | s）・H2 = s2を計算すると、長さ2（n − k）の新しいシンドロームが生成され、非バイナリの場合と同様に、次数2t −1のシンドローム多項式が生成されます。 g（z）とg（z）^ 2、および（0 | s）とeが同じ剰余類に属するという事実、s2は依然としてˆcに対応し、 同じ解決策e。ただし、s2はキー方程式に適切な長さを持ち、Berlekamp-Masseyが完全なエラーベクトルeをデコードできるようにします。</p><p>シンドロームであるニーダーライター暗号文を目的の長さのシンドロームに変換して、BMデコーダーを使用してバイナリコードのtエラー訂正を実現する方法については、セクション3.4.3ですでに説明しています。 2倍の長さのシンドロームs2は、暗号文sの前にゼロを付けて、長さのベクトル（0 | s）を作成することによって取得されます。 nは、g（z）^ 2で計算されたパリティチェック行列H2と乗算されます。</p><p>H2はシークレットサポートを使用して構築されるため、暗号文にS -1を乗算することによるスクランブリングの反転は、s2の計算中に暗黙的に実行されます。 さらに、（0 | s）の最初のkビットはゼロです。 したがって、乗算ではsの最後の（n-k）ビットのみを考慮する必要があり、H2の最後の（n-k）列のみが必要です。 したがって、リスト4.7に示すように、実装では、計算時間とメモリ効率を向上させるために、H2の必要な部分のみを構築します。</p><p>Berlekamp-Masseyアルゴリズムが一連のシンドローム方程式を設定することを思い出してください。そのうち、S1、。 。 。 、Stはデコーダーに認識されています。 g（z）2を法とするBMを使用すると、2tの既知のシンドローム方程式が生成されます。これにより、アルゴリズムはg（z）によって提供されるすべての固有情報を使用できます。 これにより、Berlekamp-Masseyアルゴリズムでtエラーを修正できます。これは、エラーロケーター多項式をPattersonアルゴリズムで奇数部分と偶数部分に分割することと本質的に同等であり、「新しい」キー方程式も生成されます。</p><p>残りの問題は、バイナリの場合にBMとNiederreiterを使用してtエラーをデコードすることです。 Niederreiter暗号システムは、コードワードではなく暗号文としてシンドロームを使用するため、GMモジュロg（z）2を使用して2倍のサイズのシンドロームを計算するアプローチは使用できません。 パターソンアルゴリズムはg（z）を超える標準コードサイズを使用してすべてのエラーを修正できることがわかっているため、暗号化プロセスでもg（z）2を超えるコードに完全に切り替えると、コードサイズが2倍になります。</p><p>センドリエのトリックがわからん。 Goppa多項式を2乗してシンドロームを再入力すると同じコセットを使っているのでそのシンドロームも元のシンドロームと同じ性質を持つとかなんとか書いてあるけど 実際に計算してみても計算が合わないのだから、具体例で説明してないので何のことだかよくわからない。</p><p>シンドロームを再入力したらシンドロームをエラーベクトルに持つシンドロームが新しくできるだけなんじゃないかとか、 実際シンドロームを2乗してみても、Goppa多項式を2乗したときにできる列を再現できないしどうにもならない。 このままt/2エラー訂正で我慢しなければならないのか。</p><p>20210414 BM法、いろんな符号で64エラー訂正までできるようになった。(op.c:０の位置にエラーがあるとき、正しく訂正できないバグを確認)</p><p>途中でハマって、BM法とEEAが同じ符号を使ってシンドロームを計算しているとばかり思って、色々バグを探していたけど実は符号の構造が違うのだということに気づくのに１週間かかった。 せっかく今まで１年かけて作ってきたpattersonやEEAが使えなくなるのは残念だけど、暗号のためには我慢するしかない。 BMはシンドロームだけで訂正できるので、暗号化の意味がないのではと思ったら、確かにシンドロームだけで訂正しているけど 置換とスクランブル行列がここで効き目を発揮して暗号化になっているのだと専門家から答えを教えてもらった。 ついでにOAEPの方法も資料を送ってもらって、頂いてばかりで申し訳ないと思った。</p><p>あとはセンドリエのトリックを実装して、訂正可能なエラーの数を倍増させないといけない。</p><p>20210413 Binary Niederreiter暗号も残すところBerlekamp-Massey法の実装だけとなりました。 main関数内をきれいにしたつもり。</p><p>そのままクローンしてもmake nieでデモを動かすことができるので試してみてください。</p><p>20210411 もうすぐこのテーマが終わるから次の目標を物色してたんですが、あれもやろうコレもやろうと手を出して、 結局自分には同時に何かをするだけのフットワークがないんだと気がついてやはり浮気は良くないことだと反省している。</p><p>そんな中でも因数分解の方のバーレカンプマッシー法のC++で半分くらいrubyと同化されているファイルをかろうじて見つけて、これをどうするか迷っている。 cm法なんかもC++で書いたはずなのだが既に昔の環境が壊れて絶滅したらしく、　ネットにあったルビーファイルだけが生き残ったという歴史を感じさせる一日だった。</p><p>明日からは気分を入れ替えて、符号のバーレカンプマッシーをやることにします。</p><p>20210410 符号ばかりで飽きてきたので、ちょっと同種写像に浮気したい気分。 ていうか、こんなでかい鍵を公開できる場所って限られていると思う。</p><p>https://ja.wikipedia.org/wiki/%E8%B6%85%E7%89%B9%E7%95%B0%E5%90%8C%E7%A8%AE%E5%86%99%E5%83%8F%E3%83%87%E3%82%A3%E3%83%95%E3%82%A3%E3%83%BC%E3%83%BB%E3%83%98%E3%83%AB%E3%83%9E%E3%83%B3</p><p>20210408 下手に実装すると高速化は遅くなるのでやめた。</p><p>20210407 https://misawa.github.io/others/fast_kitamasa_method.html</p><p>https://tex2e.github.io/blog/crypto/ntt-polynomial-multiplication</p><p>高速kitamasa法なるものがあるらしいので、FFTやホーナー法などの細かいテクニックを駆使しながらバーレカンプ・マッシー法を実装する予定。</p><p>gprofで見る限り出現頻度の多いomulはFFTで高速化できるし、odivも高速化できそう。</p><p>20210406 http://210.47.10.86:8032/2015-3/2793.pdf</p><p>20210401 http://www.kurims.kyoto-u.ac.jp/~kyodo/kokyuroku/contents/pdf/1106-5.pdf</p><p>https://www.researchgate.net/publication/220538005_The_Berlekamp-Massey_Algorithm_revisited</p><p>https://www.researchgate.net/publication/285233058_Grobner_Bases_for_Decoding</p><p>20210331 ちょっとした思いつきだけど、バーレカンプを直接実装するのではなく、2変数のFeng−Rao復号法を1変数Goppaでやってみたらどうなるんだろう？</p><p>他にも設計距離じゃなくて最小距離復号をする方法もあるようなのでそれにしてみるとか。</p><p>https://ecse.monash.edu/staff/eviterbo/papers/elsep99.pdf</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hagetaka</title>
      <link href="2021/04/27/hagetaka/"/>
      <url>2021/04/27/hagetaka/</url>
      
        <content type="html"><![CDATA[<p>やることが思いつかないので、森永卓郎の「なぜ日本だけが成長しないのか」を開いてみた。<br />たしか途中まで読んだ気がするけど、外国資本のハゲタカが日本でどれだけ悪事を働いているかうんざりした。<br />たしかに日本製品は破竹の勢いで世界市場を席巻していたけど、だからといってここまで日本をダメにする必要はないだろうと思うのだ。<br />あまり気分が悪いので途中で読むのをやめてしまった。<br />ここで頭にきてハゲタカの批判をするべきなのだろうが、昨日よく眠れなくて疲れているのでその気力もない。<br />今の日本経済がここまで悪くなった原因は、日本の中にあるのではなく外にあることになる。<br />つまり日本という瓶を激しく振っているのは外国なのだ。<br />そのへんのところを注意しないと、日本という国が抱えている問題や社会現象は理解できないと思う。<br />今の政治家は所詮外国の言いなりで責任が取れない。<br />日本で外国より進んでいることといえば、障害者が国会議員になれる国というところだと思う。<br />それにしてもHexoは数少ない非アメリカ製ITツールだと思う。 これは珍しい。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>aaa</title>
      <link href="2021/04/26/aaa/"/>
      <url>2021/04/26/aaa/</url>
      
        <content type="html"><![CDATA[<p>最近昭和リバイバルでデュラン・デュランばっかり聞いてるｗ</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="2021/04/26/about/"/>
      <url>2021/04/26/about/</url>
      
        <content type="html"><![CDATA[<p>about の画像が消えてしまう謎に挑戦中。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hard_times</title>
      <link href="2021/04/26/hard-times/"/>
      <url>2021/04/26/hard-times/</url>
      
        <content type="html"><![CDATA[<p>開発がやっと終わった。 大変な一年だった。 これを一生続けるなんて普通じゃない。 エンジニアにならなくて本当に良かった。 暗号化でOAEPとか本当はやることがあるんだけど、そこまでのニーズがあるかどうかがわからない。 署名とや応用をやってみれば？という意見もある。 でも、ちょっと休憩。 あとは定期的にバグ取り、高速化などメンテナンスになる。 久しぶりに数学でもやろう。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>math</title>
      <link href="2021/04/26/math/"/>
      <url>2021/04/26/math/</url>
      
        <content type="html"><![CDATA[<p>カタツムリでmathjax使えるようなのでやってみた。<br />一度設定してしまうとコードを毎回埋め込む必要がなくて楽。</p><p><span class="math display">\[ S_1 \rightarrow S_2 \]</span></p><h2 id="オイラーの公式">オイラーの公式</h2><p>オイラーの公式は以下のように与えられる。</p><p><span class="math display">\[ e^{i x} = \cos{x} + i \sin{x} \]</span></p><h2 id="varepsilon---delta-論法"><span class="math inline">\(\varepsilon - \delta\)</span> 論法</h2><p>任意の <span class="math inline">\(\varepsilon &gt; 0\)</span> についてある <span class="math inline">\(\delta &gt; 0\)</span> が存在して、任意の <span class="math inline">\(x \in \mathbb{R}\)</span> に対して <span class="math inline">\(0 &lt; |x - a| &lt; \delta\)</span> ならば <span class="math inline">\(|f(x) - f(a)| &lt; \varepsilon\)</span> を満たすとき $ f(x) $ は $ a $ で連続であるという。</p><p><a href="https://qiita.com/tomtsutom0122/items/e0ab6b6ccbd369db1aa2" target="_blank" rel="noopener">引用元:Qiita</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>please-please-me</title>
      <link href="2021/04/26/please-please-me/"/>
      <url>2021/04/26/please-please-me/</url>
      
        <content type="html"><![CDATA[<p>たしかにアメリカの言い分はわかる。<br>日本の繁栄の裏にアメリカがいて、アメリカ人が見つけて広めたものを日本が横取りしてアメリカ市場になだれ込んでくる。<br>これはどう見てもおかしい。<br>だから資源のない日本は産業戦略が必要だったのに、いつも貰い物の技術に依存していたのだ。<br>それでも冷戦の頃には、ソ連を封じ込めるために日本に好きなようにさせておいたほうがいいという理由があったのかもしれない。<br>でもそれはアメリカにとって屈辱だっただろう。<br>そして今後は産業で日本の土俵を作れるかどうかが鍵になる。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="2021/04/26/test/"/>
      <url>2021/04/26/test/</url>
      
        <content type="html"><![CDATA[<p>1999 lovers only</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>beginner</title>
      <link href="2021/04/25/beginner/"/>
      <url>2021/04/25/beginner/</url>
      
        <content type="html"><![CDATA[<p>もう若くないと感じる。<br>昔みたいに余力があって、仕事の他にもいろいろやりたいことをやろうとしていた自分はもういない。<br>仕事じゃなくて今は１００％趣味になってるけど、それでもやはり疲れる。<br>昔は寝落ちしてまで自分の世界を守るのに必死だった。<br>そしてあの頃はまだ日本には秩序があった。</p><p>こんなに毎年奇妙な伝染病が広がらなかったし、夏だってこんなに３５度を超えるなんてなかったし、大地震があっても自衛隊による瓦礫の撤去や復興が最優先にされていたから、マスコミが色んなことを騒ぐ暇もなかったくらいある程度国家が機能していたのだ。</p><p>今やワクチン一つ準備できない底辺国になってしまった。</p><p>会社だってアルバイトにボーナスを出していたくらいだし、仕事なんかハンコ一個あれば誰でも働ける場所がいくらでもあった。<br>バブルの時代は日本が最も豊かな時代だった。<br>みんな昭和のことを悪く言うけど、あの頃が懐かしい。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>where</title>
      <link href="2021/04/25/where/"/>
      <url>2021/04/25/where/</url>
      
        <content type="html"><![CDATA[<p>ページの画像が変なので修理。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>stusy</title>
      <link href="2020/12/18/stusy/"/>
      <url>2020/12/18/stusy/</url>
      
        <content type="html"><![CDATA[<p>http://www.kurims.kyoto-u.ac.jp/~kyodo/kokyuroku/contents/pdf/0786-02.pdf</p><p>そういえば計算ばかりで研究していないと思ったので、 そもそもどこから軌道が外れたのか調べてみたらMcEliece-R_Tの頃だった。 そしてその前は、幾何学的Goppa符号の複合をやってる最中に面倒くさくなったのだ。 というのも、リスト復号にせよ多点生成にしても暗号で使える保証のないものだったからだ。 そのためにわざわざ頭を使って計算方法を理解するというのは面倒くさい。</p><p>そこでネットを彷徨っていたら見つけたのが上記の研究だった。 具体的な幾何学的対象がきまっていないと言うけど、そういう群作用をもつことで有名なのが 超楕円曲線のヤコビアンなのでそれが使えないかどうか調べる予定。 そして本来自分の研究目標だったRM符号から得られる任意の曲線から生成された 幾何学的Goppa符号の性質なんていうテーマは吹き飛んでしまった。</p><p>多項式環上の加群がどうとか書いてあるので、ここはグレブナー基底の出番じゃないかと 思ってみたり。</p><hr /><p>暗号の二者択一プロトコルが理解できたので、その具体例を符号で実現できないか 考えていたときに出くわしたのがQC-LDPCだった。 こうしてQC-LDPCにちょっと浮気をしていたのだが、復号するのに統計学が必要だったので、</p><p>「ごめん、君のために代数学を犠牲にするわけには行かない」</p><p>という感じで元に戻るべきかどうか迷い中。 迷っている間にどんどん関係が深まって泥沼になったりしてｗ</p><p>実際明示的な構成例が知られていないので、このMWLとか言うのを使った符号の具体例を 作れるのかどうかに興味がある。</p><p>暗号に使えなかったとしても、新しい符号の属を見るけることになるので、 ちょっと面白そうですよね。</p><p>この一般化に対して復号アルゴリズムが存在するかどうかも全くわかってない。 置換復号って調べてみたけど、置換群とはなんの関係もなさそうだった。</p><p>わからないことをやるのがケンキュウだけど、わからないのは苦痛。 数学もわからないからやらないって感じで嫌われてるんだろうな。</p><p>「この分野は抽象的で、天才にしかわからないから」</p><p>なんて嫌われたら研究費もらえないもんねｗ</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dark</title>
      <link href="2020/12/14/dark/"/>
      <url>2020/12/14/dark/</url>
      
        <content type="html"><![CDATA[<p>今日は夕方から雪雲に覆われてなんだか暗い一日だった。<br>分厚い雪雲が空を覆い尽くしてしまうと、あっという間に日が暮れてしまった。<br>このままクリスマスまで毎日費が短くなっていくので憂鬱だ。<br>しかし今日は、あまり眠れなかったのに途中で眠くもならず、<br>最近のJavascriptの書き方とか、RustやGoを少し書いてみた。<br>あとは映画でも見て過ごそうかな。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>implementation</title>
      <link href="2020/12/13/implementation/"/>
      <url>2020/12/13/implementation/</url>
      
        <content type="html"><![CDATA[<p>ついにすべてのリポジトリ毎にブログを設置することができた。<br>しかし自分だけでできたのではなく、ハッカーさんの一言でわかったのだ。<br>まあhexoなどの静的コンテンツ作成システムについて勉強になったと思えば、<br>その苦労も報われる。</p><p>静的コンテンツなのにどうして動くのか、その仕組みを知りたい。<br>Hexoは中国製らしいけど、やはり技術力や発想みたいなものが日本人より<br>優れているのだろうか。<br>ひとくくりには言えないだろうけど、Hexoはすごい。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>challenge</title>
      <link href="2020/12/11/challenge/"/>
      <url>2020/12/11/challenge/</url>
      
        <content type="html"><![CDATA[<p>リポジトリ毎にテーマが変えられないか試しているけどうまく行かない。<br>一日中やっていたから具合が悪い。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ddd</title>
      <link href="2020/12/11/ddd/"/>
      <url>2020/12/11/ddd/</url>
      
        <content type="html"><![CDATA[<p>^^^^</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>recover</title>
      <link href="2020/12/11/recover/"/>
      <url>2020/12/11/recover/</url>
      
        <content type="html"><![CDATA[<p>recover?</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>all</title>
      <link href="2020/12/11/all/"/>
      <url>2020/12/11/all/</url>
      
        <content type="html"><![CDATA[<p>@@@@@@@@@@</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xxx</title>
      <link href="2020/12/11/xxx/"/>
      <url>2020/12/11/xxx/</url>
      
        <content type="html"><![CDATA[<p>test</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>aaa</title>
      <link href="2020/12/10/aaa/"/>
      <url>2020/12/10/aaa/</url>
      
        <content type="html"><![CDATA[<p>aaa</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zzz</title>
      <link href="2020/12/10/zzz/"/>
      <url>2020/12/10/zzz/</url>
      
        <content type="html"><![CDATA[<p>てすと</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>roll</title>
      <link href="2020/12/10/roll/"/>
      <url>2020/12/10/roll/</url>
      
        <content type="html"><![CDATA[<p>更に確認。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wallpaper</title>
      <link href="2020/12/10/wallpaper/"/>
      <url>2020/12/10/wallpaper/</url>
      
        <content type="html"><![CDATA[<p>壁紙が変わるか実験。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>new</title>
      <link href="2020/12/10/new/"/>
      <url>2020/12/10/new/</url>
      
        <content type="html"><![CDATA[<p>何だかよくわからないhexoなんですが、いろいろ警告が出てきてうざいです。<br>なんとかならないものか。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hospital</title>
      <link href="2020/12/09/hospital/"/>
      <url>2020/12/09/hospital/</url>
      
        <content type="html"><![CDATA[<p>病院に行って悩み解決。<br>本来なら看護師が聞くべき話を、ここですることになるなんて本末転倒だねといっていた。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tired</title>
      <link href="2020/10/26/tired/"/>
      <url>2020/10/26/tired/</url>
      
        <content type="html"><![CDATA[<p>昨夜1時過ぎに目が覚めてしまい、それから2時間位プログラムをやっていたら、<br>結局朝の8時過ぎまで起きてしまい、寝てないから具合悪くなってそれから寝たら<br>12時まで寝てしまって今すごくだるい。</p><p>二度寝をするとだるくなるというのは本当だ。</p><p>本を読む気力もなく、プログラムも適当なところで疲れて止めてしまって台所でぼーっとしてたら<br>突如として原爆写真集が見たくなってしまった。<br>こんなことを言ったら不謹慎だとは分かっているのだが、あの廃墟になぜか惹かれてしまう。<br>勿論、やけどでぐちゃぐちゃになった体は気持ち悪いので見たくない。<br>廃墟の観光があるくらいだから、廃墟に魅了される人は意外といるのではないだろうか。<br>戦争は絶対に許されないとは思っている。<br>でも、こうなると戦争も原爆もイベントである。<br>平和の祭典はどうでもいいけど。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>不眠症</title>
      <link href="2020/10/11/%E4%B8%8D%E7%9C%A0%E7%97%87/"/>
      <url>2020/10/11/%E4%B8%8D%E7%9C%A0%E7%97%87/</url>
      
        <content type="html"><![CDATA[<p>眠れないわけじゃいけど中途覚醒してしまう。<br>本当は眠いのに眠れなくなる。<br>なぜかはわからない。<br>そして夜中に起きてプログラムなんかいじってる。<br>新型の暗号ができそうだから。<br>でもこういうことは、できれば昼間やりたい。<br>よく眠れないので昼間も集中力がないままだ。<br>今月に入ってからずっとこうだから、多分季節の変わり目だからだと思う。<br>特に夕方６時過ぎから憂鬱になる。<br>そしてもうすぐまた寝る。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>emacs</title>
      <link href="2020/09/30/emacs/"/>
      <url>2020/09/30/emacs/</url>
      
        <content type="html"><![CDATA[<p>何だか日本語の調子がおかしいと思ったら、emacsの設定ファイルがおかしかった。<br>漸く治ったようなのでちょっと試し書き。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>interpolation</title>
      <link href="2020/09/25/interpolation/"/>
      <url>2020/09/25/interpolation/</url>
      
        <content type="html"><![CDATA[<p>interpolation（補間）多項式を計算してリスト復号をするか、Hamming Quasi Cyclic符号を作って<br>符号を使った暗号を実装するか。でも、それだけではひねりが足りないので、Reed-Muller符号の一般化<br>をして復号できたらいいなと思っている。Reed-Muller符号を理解するか、リスト復号をマスターするか<br>違いはまだどちらもわからない。<br>どうせなら一般化したリードマラー符号をリスト復号するのがいいのかもしれない。<br>平面上の点を2変数の任意の字数を持つ多項式で評価する最も単純な符号のクラスがリードマラー符号なので<br>多分これを実装するほうが簡単なのだと思う。でもリードマラーをリスト複合する方法も知らないといけないので<br>もっと大変かもしれない。<br>久しぶりに研究モード。<br>体調はそんなに良くない。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>秋の気配</title>
      <link href="2020/09/15/%E7%A7%8B%E3%81%AE%E6%B0%97%E9%85%8D/"/>
      <url>2020/09/15/%E7%A7%8B%E3%81%AE%E6%B0%97%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>夜の気温もだいぶ下がってきて、秋が駆け足でやってくるのを感じる。<br>もうそろそろ長袖が活躍する時期だなと思う。<br>今年の春は５月になった途端に夏なったので、長袖を剪る季節が少なかった。<br>着ないまま古びていく洋服が哀れで、なんとか今年の秋には活躍させてみたい気がする。<br>せっかく買ったものだし、長く着たい。</p><p>ウィンドウズのメンテナンス。<br>何だかよくわからない間にログイン時間が異様に長くなったので、新規にアカウント増やして対応した。<br>２つのアカウントがだめになって、３つ目で漸く落ち着いた。<br>折角ダウンロードしたアプリのインストーラーが消えるのはもったいないので、<br>クリーンインストールしたほうが早かったけど今回はそれをしなかった。<br>次回はちゃんとバックアップをとって対応しよう。<br>しかしまあ、ディスク使用量のでかいこと。<br>コピーするだけでも２時間はかかるだろう。<br>しかも途中で止まるし。<br>Linuxもなんとかしないといけない。<br>バックアップは本当に面倒だけど、必要な作業だ。<br>いっその事パソコンやネットのないシンプルな生活にしたほうがいいのかもしれない。<br>パソコンにこれ以上カネをつぎ込むわけには行かないし、いくら趣味と言っても何だか不健康な気がする。<br>そういうパソコンに縛られるような生活は、そろそろ終わりにしたほうがいいのかもしれない。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>login-time</title>
      <link href="2020/09/13/login-time/"/>
      <url>2020/09/13/login-time/</url>
      
        <content type="html"><![CDATA[<p>windows10のアカウントをいじっている間に、インストール時のアカウントプロファイルまでおかしくなってログインするまでの時間が１分とか、かかるようになってしまった。<br>急遽新しくアカウントを作って、そちらで作業が続けられるようにしているのだが、まだ付け焼き刃のような感じで最初のアカウントを安易に消すわけにも行かず、このまま当分生かさず殺さずの状態が続きそう。</p><p>そしてパソコンケースの返品。<br>あれはもうすでに決着したはずのことなのに、２日続けて返品しろという謎のメールがアマゾンから届いて、これはどういうことかと問い合わせても何だかよくわからない。<br>誰がこのことを把握しているのだろうか。<br>結局アマゾンの倉庫に送ることになったのだが、そもそも返品する気のないものに返品メールを送りつけて、また問題が面倒になるのが怖い。<br>こういう時マーケットプレイスの危険というか、不安があるのかもしれない。<br>安易に買い物できないような。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>中途覚醒</title>
      <link href="2020/09/09/%E4%B8%AD%E9%80%94%E8%A6%9A%E9%86%92/"/>
      <url>2020/09/09/%E4%B8%AD%E9%80%94%E8%A6%9A%E9%86%92/</url>
      
        <content type="html"><![CDATA[<p>なんと１０時に寝て１２時半に目が覚めてしまった。<br>ものすごく眠いのにねたくない。<br>というより眠れない。<br>ウィンドウズで記事を書こうとしたけどうまく行かない。<br>でももうすぐ寝る。<br>今日は病院だ。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>靴</title>
      <link href="2020/09/05/%E9%9D%B4/"/>
      <url>2020/09/05/%E9%9D%B4/</url>
      
        <content type="html"><![CDATA[<p>まさか雨に濡れただけで靴が壊れるとは思わなかった。<br>そして生乾きのまま放置したらすごい悪臭がｗ。<br>いま洗濯機で洗っているんだけど少しは良くなるだろうか？<br>壊れたと言っても中敷きが剥がれただけなんだよね。<br>わずか一年半で消えた私の５千円・・・。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>難しい</title>
      <link href="2020/09/03/%E9%9B%A3%E3%81%97%E3%81%84/"/>
      <url>2020/09/03/%E9%9B%A3%E3%81%97%E3%81%84/</url>
      
        <content type="html"><![CDATA[<p>ちょっといじってみれば解るけど、これを自分のサイトとしてカスタマイズするのは尋常じゃなく面倒なことになりそう・・・。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文字化け</title>
      <link href="2020/09/03/%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91/"/>
      <url>2020/09/03/%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91/</url>
      
        <content type="html"><![CDATA[<p>何だかまだよくわからないけど、記事の生成に失敗してなれるまで大変。<br>結構楽にできると思っていたのに、仕組みを理解する必要がありそう。<br>emacsで編集するとうまく行かないみたいだ。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="2020/09/03/test/"/>
      <url>2020/09/03/test/</url>
      
        <content type="html"><![CDATA[<p>�������ޤ����ޤ�ư���ʤ���</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>開発日記</title>
      <link href="2020/09/03/%E9%96%8B%E7%99%BA%E6%97%A5%E8%A8%98/"/>
      <url>2020/09/03/%E9%96%8B%E7%99%BA%E6%97%A5%E8%A8%98/</url>
      
        <content type="html"><![CDATA[<p>３．開発日記</p><p>20191218</p><p>GF(4096)上定義されたバイナリGoppa符号を生成できるようになった。この計算には14分もかかるので今後何か別の計算方法を考えないといけない。(oplib.cpp)<br>因みに、QC-MDPCなんで邪道だと思っているので、オリジナルの古典的Goppa符号を使っている。</p><p>同時に、LU分解法にヒントを得た可逆スクランブル行列を生成できるようになった。(lu.c)</p><p>公開鍵のパラメーターは、[n,k,t]=[4096,2040,85]である。</p><p>20191221</p><p>GF4096において、型をunsigned shortにして、バイナリ生成行列を出力させる鍵生成まで完成。(oplib.cpp)</p><p>20191226</p><p>開発メモ。誤りロケータだけは実装完了。バイナリバージョンの場合は誤りの位置を決定するだけで済むのでこれで完成。(chen.c)</p><p>既知のバグ：誤りの値を計算するときに、0になる場合がある。これは誤りロケータと、誤り値関数にまだ最小公倍数、つまり<br>1次式が残されている証拠で、この点を解決するためにユークリッドアルゴリズムに多少の改良を加える必要がある。この点については<br>来年に目標にしたい。(oplib.c)</p><p>20191227</p><p>誤りロケータもバグっていることが判明。しかし体力の限界。もう十日近く15時間やってるけど、そろそろ限界。<br>今のところ一番確実に動くのがchen.cなので、これをもとにバグ取りをしようと思う。でも今年はもうおしまい。<br>わずか１０００行のプログラムの挙動が理解できない私は低能だｗ</p><p>手で計算できないものは計算機を使って計算させてバグ取りをしないといけないし、デバック用のプログラムも書かないといけないのでまた来年。</p><p>20191229</p><p>バグを最後の1つに絞り込めた。現在デバッグモジュールを作成中。</p><p>20191230</p><p>ついにバグを突き止めた。生成行列の特定の列が０ベクトルだったという落とし穴がｗ。アルゴリズムは間違いなかった。<br>どこを探しても問題なかったから、まさかと思って調べてみたら０だったというｗ。しかも１１個もあった。<br>陽性かくにん、よかった。あとは０のない生成行列をどう作るかで、トレースチェックだけすればいいんじゃないかと思うのだが違うんだろうか？<br>これでもかなりマシになったほうなのだが、まだ重解を持つ可能性があるので完全にバグがないとは言えない。<br>とりあえずバイナリの場合は誤り位置だけ正確に計算できればいいので、これで完成しているはず。<br>あとは実際に公開鍵を使って暗号化復号化をするというIOの部分を作ることになる。あとソースにコメントもつけないといけない。(oplib.c)</p><p>20191231</p><p>とりあえずバグはなくなったはずなのですが、まだあるかもしれません。そしてこのコードをどういう形で使うのかはまだ決めてません。<br>PGPのような完璧なアプリを作るのはちょっと荷が重いし、Cの初心者レベルのコードなので興味のある人が最適化したり、もっとエレガントな<br>コードを書いてくれればいいのですが。とりあえず趣味でやった割にはよくできたと自分を褒めてあげたいですｗ。</p><p>20200131</p><p><a href="https://csrc.nist.gov/projects/post-quantum-cryptography/round-2-submissions" target="_blank" rel="noopener">https://csrc.nist.gov/projects/post-quantum-cryptography/round-2-submissions</a></p><p>アメリカのNISTで進んでいる次世代公開鍵暗号の選定、第2ラウンドまでにMcEliece暗号が残っているようです。今の所符号に基づく暗号と講師に基づく暗号が拮抗しているようです。私もアセンブリマクロを使って最適化してみようかな。頑張れMcEliece！</p><p><a href="https://klevas.mif.vu.lt/~skersys/vsd/crypto_on_codes/goppamceliece.pdf" target="_blank" rel="noopener">https://klevas.mif.vu.lt/~skersys/vsd/crypto_on_codes/goppamceliece.pdf</a></p><p>入れ知恵になるかもしれないですがこれも参考にしてみたいと思います。どうも外部ライブラリを使った実装ばかりで私みたいに一枚岩の自己完結プログラムがないようで。</p><p>20200202</p><p><a href="https://en.wikipedia.org/wiki/Binary_Goppa_code#Decoding" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Binary_Goppa_code#Decoding</a></p><p>これのおかげでやっとパターソンアルゴリズムを理解できた。シンドローム多項式の逆多項式はゴッパ多項式が既約のとき、ユークリッドアルゴリズムで<br>計算できる。そしてバイナリGoppa符号の場合、符号長は変わらず次元だけが縦に引き伸ばされるので、シンドローム多項式は拡大体のときと同じ多項式である。<br>このとき逆多項式とその平方が計算できるので、解くべき誤り位置関数の次数はシンドローム多項式の半分になる。だから拡大体のときより<br>Goppa多項式の次数は半分で済む。ということはバイナリバージョンを作らなければならない。やる気が出たらやろう。</p><p><a href="http://lupus.is.kochi-u.ac.jp/shiota/misc/field/FiniteField.html" target="_blank" rel="noopener">http://lupus.is.kochi-u.ac.jp/shiota/misc/field/FiniteField.html</a></p><p>あとgithubにはなかったけれど、プロが書いたMcEliece暗号のデモがあって、エレガントに64ビットに最適化されていて鍵生成はものすごく早かった。<br>本来ならこうあるべきだけど自分にはその実力がない。</p><p>まだ理解があやふやな部分があるので、ｔ個のエラーを訂正するのにｔ次規約多項式の自乗を使ってｔ個のエラーを訂正すれば今の方法を変更しなくても<br>済むだろうと思った。Goppa多項式の次数は半分に減るので結果は同じだ。アルゴリズムを保ったまま秘密多項式の次数を下げられる。</p><p>20200209</p><p><a href="https://digitalcommons.csbsju.edu/cgi/viewcontent.cgi?article=1019&amp;context=honors_theses" target="_blank" rel="noopener">https://digitalcommons.csbsju.edu/cgi/viewcontent.cgi?article=1019&amp;context=honors_theses</a></p><p>これもすごい。</p><p>20200222</p><p>パターソンアルゴリズムを完全実装しました。このアルゴリズムの実現のために多項式の平方根を計算する関数などを追加しました。<br>我ながらいい感じで使えているのでよかったと思います。ほかの人が満足するかわかりませんがｗ。このアルゴリズムによって、<br>ｔ次の多項式に対してt個のバイナリエラーが訂正できます。できるかどうかわかりませんでしたができました。(polib.c)</p><p>20200227</p><p>いよいよコードレビュー。まだomodとかの終了条件を理解してないのでそこから始めることになる。インデントとかは後回しになるかも。<br>パラメータを変更した。変更後のパラメータは[n,k,t]=[6688,3328,256]である。</p><p>アルゴリズムの検証作業に入ります。元ネタはここー＞</p><p><a href="https://github.com/davidhoo1988/Code_Based_Cryptography_Python" target="_blank" rel="noopener">https://github.com/davidhoo1988/Code_Based_Cryptography_Python</a></p><p>こういうのがあったんだけど古くて動かない。GF2で既約な多項式を見つけるのは早いけど、拡大体上で既約な多項式を見つけるのは<br>とても遅い。なので、やはりランダムに取ってきて使える鍵だけを使うほうが早い気がする。正攻法より効率的かも。</p><p>20200228</p><p>文献の追加。バグトラップを仕掛けてバグを見つけています。ユークリッドの方はほぼ完璧なんですが、パターソンアルゴリズムでエラーロケーター<br>が計算できたり出来なかったりしているバグを見つけて修正方法を考えています。既約多項式なら完全なので、先に正しい鍵を用意するのが早いのかも<br>しれませんが、もしそれでだめだったらアルゴリズムのバグですね。<br>でも拡大体上で既約多項式を見つけるのはsagemathでもすごく時間がかかるので悩んでいます。</p><p><a href="https://www.hyperelliptic.org/tanja/students/m_marcus/whitepaper.pdf" target="_blank" rel="noopener">https://www.hyperelliptic.org/tanja/students/m_marcus/whitepaper.pdf</a></p><p>20200229</p><p>バグが取れた。基本計算は完成したので、これから電子署名と暗号通貨を作ります。</p><p><a href="https://classic.mceliece.org/" target="_blank" rel="noopener">https://classic.mceliece.org/</a></p><p>20200303</p><p>今日は暗号化関数の前処理としてハッシュ関数の他の人が書いた使えそうなリポジトリを探してコピーして改ざんした。<br>SHA3を使う予定。OAEP処理するため。</p><p>20200304</p><p>サブフォルダdecomp内の、分割コンパイルできるように切り離されたソースと簡単なMakefileを置き換えた。<br>更にハッシュ関数としてsha3を他のリポジトリからcloneして暗号化関数に使用した。<br>main関数の中にあったシンドローム計算のための処理を関数に分離した。<br>私がこれでいいんだからこれでいいのだ。<br>今の所実用レベルのパラメータを実装したものは見当たらない。解読されているような少し昔の方式があるだけだ。<br>これが気に入らないというなら自分で論文を読んで1から書くか、改造すればいいだけであって分割コンパイルもインデントも私は必要としていない。<br>暗号化ができればそれでいいのだ。そういうことができるプロもいるだろうからその人の実装を待てばいい。</p><p>20200305</p><p>512ビットの秘密鍵を暗号化復号化できるようになった。後はファイルやバッファも暗号化できるようにしたい。<br>バイナリ公開鍵は半分しか作ってないので、それも完成させる必要があるけど、今はこれで十分な気がする。</p><p>OAEP処理のつもりですが、encrypt関数でランダムエラーにハッシュをかけて、そのハッシュ値を64バイトの鍵データにXORします。<br>続けて、エンダムエラーを符号化してそのシンドロームをファイルに出力します。このファイル名は、enc.skです。<br>復号化はdecrypt関数です。もっとわかりやすくしないといけないですね。新しい関数を作ることばかりで、全然保守してない。<br>マイペースｗ。</p><p>20200306</p><p>蛇足かもしれないけどファイルの暗号化復号化の関数を作った。<br>復元したエラーベクトルにハッシュ関数をかけて、そのハッシュ値をファイルのデータにXORして暗号化する公開鍵/秘密鍵のコンパチブル関数。<br>暗号化の方法ですが、プログラムの中でfileenc()関数やfiledec関数を呼び出して、実行時に</p><p>./a.out file1 file2 file3</p><p>とやるとfile1に暗号化したいファイル名、file2に暗号化後のファイル名、file3に復号後のファイル名でテストできます。</p><p>一応ライブラリみたいな感じにしたいので、使い方についてはもう少し詳しく書く予定です。<br>マニュアルみたいなことをここに書くべきかと。もっと詳しい人が見れば、十分な暗号化にはなっていない可能性があります。<br>エディタでみると記号みたいなものが出てくるので、完全に砂のようにランダム化されていない感じがします。<br>20200313</p><p>とりあえず関数encryptで512ビット秘密鍵は暗号化復号化できるようになったので、Niederreiter暗号は完成していると言っていい。<br>残るのは鍵をバイナリにして生成と復号をするかというUIの部分だけだが、ここでPGPのような暗号アプリを作るつもりはないので、<br>今後コードを利用して必要なアプリや各自応用をしてほしい。<br>自分もできる限りコードの可読性を上げるつもりなのでメンテナンスは続けていく。<br>バイナリ符号を扱うことができるようにするところまでは最低限やっておきたい。</p><p>20200315</p><p>今windows版を作っています。こうして違う環境とデバッグをすると、一見うまく動いているように見えるだけという怪しいコードが結構ありますね。<br>できるだけエラーを減らします。それにしてもｇｃｃが性能がいいのかほとんどエラーは出ません。24時間耐久テストを実行してます。</p><p>20200320</p><p>AMD性最適化コンパイラ（<a href="https://developer.amd.com/amd-aocc/）" target="_blank" rel="noopener">https://developer.amd.com/amd-aocc/）</a></p><p>AMDを使っているならこちらで試してみてください。</p><p>このプログラムは今まで学習してきたことの集大成として実験的に古典的Goppa符号を複合するアルゴリズムを実装したものです。<br>応用としては公開鍵暗号やブロックチェーンがあります。<br>あくまでも自分用なのでおすすめはしません。<br>特徴としては、一変数多項式を単項式の配列で表現するという直感的な四則演算を設計に取り入れました。<br>アルゴリズムは設計者の思考パターンを反映するのかもしれません。<br>設計方法が悪いので最適化には向いてないかもしれませんが、とにかくコードの美しさよりまともに動くプログラムを優先的に作ろうとしたものです。<br>外部ライブラリを必要とせず、このリポジトリだけで完結しています。<br>とりあえず５１２ビットの秘密鍵を暗号化復号化ができるようになったので、今後はバイナリ符号に対応するのとメンテナンスとして可読性を上げていくようにします。<br>ちょっとづつですが毎日いらない変数を消したりしてます。<br>分割コンパイルするとオブジェクト間の最適が出来ないらしいので、意図的に分割コンパイルはしてません。<br>メインのソースにインクルードする形で一つのファイルにまとめています。<br>どちらかというとアプリではなく、特殊な科学計算なので速度優先で書いてます。</p><p><a href="https://classic.mceliece.org/" target="_blank" rel="noopener">https://classic.mceliece.org/</a></p><p>こちらにプロが作った比較用のサンプルコードがあります。</p><p>20200321</p><p>特に変わってませんが、おすすめのコンパイラオプションを見つけたので書いておきます。<br>オリジナルのMakefileは汎用的なものですが、AMDのZENアーキテクチャに特化したバイナリコードを生成するためのオプションは次のようになります。</p><p>gcc -O3 -mtune=znver2 -march=znver2 -ffast-math -funroll-loops  -fopenmp oplib.c</p><p>これでバグトラップ有りで２６秒台がコンスタントに出ました。<br>gccもオプション次第でAMD純正コンパイラと遜色ない性能を出せることがわかりました。（ver 9.2）</p><p>最適化オプションを全くつけないと、１分２５秒でした。<br>素人の分際で最適化なんておこがましいと言われそうですが、何もしないよりマシだと思ったので、そのへんはコンパイラ任せにしようという感じですｗ．</p><p>20200322</p><p>使わない変数を少し削除した。<br>公開鍵計算のループを並列化に成功。なんと10秒で鍵生成から暗号化復号化までできる。<br>一方で、処理が高速化した関係か新たなバグが見つかった。<br>あまり喜んでもいられない。<br>よく考えてみれば鍵生成は最初の一回だけなので、20秒位は我慢できるかもしれない。<br>途中の処理でエラーがでるくらいなら、そのくらいの欠点には目をつぶるしかないのかもしれない。<br>並列化して生成された鍵を使うと5分もしないうちにエラーで止まってしまう。<br>こんなに頻繁にエラーが出ては使い物にならない。<br>デバッグしてもいいのだが、果たしてその努力に見合う価値があるかどうかは分からない。</p><p>20200223</p><p>並列処理で、鍵生成という一回限りの処理にバグがある。<br>でもそのバグを取る労力に見合う効果がないので、鍵生成の並列化はしないことにする。<br>今日は調子が悪いみたいでプログラムをしているとイライラする。<br>毎回鍵を生成しないようにファイルから読み込もうとしたのだがうまく行かないので、一昨日のプログラムに戻した。<br>そして一昨日のプログラムにバグが合ったのでそれを修正した。<br>差分の読み方がわからないから、ファイルビューで見てまるごとコピペしただけの一日。</p><p>追記：<br>言われるがままに分割コンパイルなんてなれないことをしたおかげで、昔動いていたファイルから鍵を読み込む方法がうまく行かなくなってしまった。<br>でも古いファイルをフォルダにまとめておいたのが動いたので事なきを得た。<br>我が道を行ったほうがいいようだ。<br>鍵生成なしだと暗号化復号化にOpenMPしないで9秒かかる。</p><p>20200324</p><p>バグを特定した。なんといつも決まった列が0になるというバグ。いつも418の倍数の列だけが0になる。<br>明らかな規則性を持つので、どこでそれが発生しているのかを調べればいいことになる。<br>これが明らかになれば、並列化の実現になることは間違いない。</p><p>原因判明。マルチスレッドの副作用。符号長６６８８を１６個に分割するとちょうど４１８になる。<br>１６個のスレッドが同時に動く時、一つのスレッドが４１８列を処理するのだが、ちょうど４１８番目の列が処理されずに残ってしまう。<br>つまり計算されない列が出てきてしまう。これを再計算して埋め合わさない限り完全な符号にはならない。<br>この手間を考えるとセキュリティ上完全な符号を作ったほうがいいので、わざわざ並列化して特定の列にエラーが来ないように小細工をするより馬鹿正直に１列づつ逐次処理をしたほうがいいということになる。<br>速さを取るか、セキュリティを取るかで考えれば２０秒の鍵生成のほうが確実だと言える。<br>短縮符号としてある特定の列を取り除き、計算しないという方法も考えられるが、そんなことをする意味がない。</p><p>追記：原因不明のバグもある。仮に４１８の倍数にエラーが来ないようにしても異常終了する場合がある。<br>その点、逐次処理をしている方には全くエラーが出ない。並列処理をしたものは５分と立たない間にエラーで止まる。</p><p>20200325</p><p>並列化しようとしても、変数が１つなので他のスレッドから上書きされて並列化出来ない。<br>最終的にほしいのは行列なので無理やり並列化する方法もあるかもしれないが、まだよく並列化アルゴリズムの動作原理を理解していない。<br>ループの処理したい範囲をスレッドに指定してやって、各スレッドごとに変数を用意してやればできる気がする。</p><p>追記；<br>para.cで生成多項式を固定した場合、パラレル処理とシリアル処理とで同じ鍵を生成することを確認した。<br>つまり同じ鍵をより早く並列処理で生成できたことになる。<br>しかしまだ油断できない。</p><p>20200326</p><p>並列化プログラミングでいくつかのキーワードを試したがうまく行かない。<br>全く同じ鍵ができるとは限らない。同じ鍵ができるときもあるという感じだ。スレッドIDがランダムに決まるせいかもしれない。<br>でももし違うとしてもシーケンシャルで生成した行列の列を入れ替えたものができるだけなので、本質的に同じ生成行列を出力していることになる。<br>そして実際そうやって作った生成行列も、もし同じならシーケンシャルと同じくらいの確実さで暗号化に使用できるはずだ。<br>というか、同じ鍵から生成したのではない生成行列だったら、そもそも復号が出来ないはずだから同じとみなしてもいいはずだ。</p><p>追記：<br>並列処理のテストバージョンである　test_prll.c　を追加。<br>ファイル内のdeta関数が行列の並列処理をして、高い確率でdetで逐次処理して生成した行列と一致する。<br>成功確率が高い気がするが、たまにハズレる。</p><p>20200327</p><p>引き続きtest_prll.cで耐久性実験を継続中。24時間動かしても止まらない。計算はかなり安定してきていると思う。<br>最も解空間が3000ビット以上もあるので1日動かしたからといって完璧だとは言えないのだが。<br>AMD Ryzen7 2700Xを25000円で買っておいてよかったと思う。<br>今のままでも十分早いし、買い替えるだけのメリットがないという評価だったので、Ryze3000シリーズはあまり評判のいいものではないようだ。<br>今買い替えるより次のプロセッサまで待った方がよさそう。去年買ったばかりなので減価償却してない。<br>時期プロセッサは一つのコアで処理できるスレッドの数が2倍になるという噂だ。</p><p>負荷のかかった状態で並列計算させた場合の結果が、AMD純正コンパイラとgccの間で差が出るようだ。<br>AMDのほうが早い気がするのは偶然だろうか。<br>例えば、グローバル変数の行列に複数のスレッドがアクセスしようとしたときに排他制御でブロックされたスレッドは書き込みに失敗して<br>その列が０になってしまうようだけど、AMDのコンパイラの実行ファイルだとこのような衝突を防いでくれるようでいつも一回でうまく行く。</p><p>20200328</p><p>引き続きでバック作業。確実視されていたdecode関数でエラーがでるので、pattarsonをコメントアウトして集中的にデバック作業を行っている。<br>一方で以下のサイトを見つけた。</p><p><a href="http://arbitrage.jpn.org/it/ryzen-7-2700x/" target="_blank" rel="noopener">http://arbitrage.jpn.org/it/ryzen-7-2700x/</a></p><p>このようにRyzenプロセッサはマルチスレッドが有利に作られているので、AMD純正コンパイラとマルチスレッドプログラミングは相性がいいと言っていい。<br>つまりOpenMPを多用するようなプログラミングで真の性能を引き出せるというわけだ。<br>Ryzenの性能を引き出すために、今後の目標としては量子計算機よりも並列計算の動作原理を中心に勉強するほうが大事らしい。</p><p>20200329</p><p>xgcdにバグを発見。とりあえず別関数を用意して、そちらで対処。decodeにはogcdを、pattartsonにはxgcdを使うことにしてデバッグ中。<br>一応終了条件を変えてみたけど、正しいかどうかは実験中。これでもまだエラーがでるならogcdを使うほうが安全かも。</p><p>20200330</p><p>24時間以上動いてますがまだエラーが出ません。やはりXGCDのバグだったのでしょうか？<br>並列計算で同じ鍵ができるというのは20連発成功という確率です。<br>今までNiederreiterの読み方がわからなかったんですが、ニーダーライダーというらしいです。かっこいいですね。</p><p>20200331</p><p>またエラーで停止。朝起きたら止まってた。気持ちが悪いことにxgcdの終了条件が２つになってしまう。<br>何か根本的に間違っているのだが、今はまだわからない。<br>decodeとpattarsonは終了条件が違うようなので、使用する関数をxgcdとogcdに分けました。</p><p>20200403</p><p>運用三日目。依然としてエラーは検出されない。これで完成と言ったところだろうか？<br>これからは電子署名と合わせたブロックチェーンを使ったスマートコントラクトを１から作ることになる。<br>PKI基盤や、ネット上に分散させるような秘密鍵の安全な管理に使う方向で行きたい。</p><p>20200404</p><p>実験終了。跡はバイナリ符号に置き換えるだけ。q進Goppaは完成だ。</p><p>20200405</p><p><a href="https://onoono-life.blogspot.com/2014/04/ccopenmp.html" target="_blank" rel="noopener">https://onoono-life.blogspot.com/2014/04/ccopenmp.html</a></p><p>鍵生成の並列化にはこのサイトの情報が役に立ちました。<br>並列化に当たってはAMD純正のコンパイラを使いました。<br>gccで並列化を実行すると先に終了したスレッドがフライングをして変数のアクセスに失敗して何回もやり直す現象がおきます。<br>Makefileはgccでコンパイルできるように調整したものです。（まだ間違っているかもしれないので修正してください）<br>今日はバグのないバージョンにoplib.cを置き換えて、それ用にMakefileを書き換えました。<br>後はWallオプションで警告を消します。<br>バイナリ公開鍵を使えるようにします。</p><p>それにしてもコロナは一体いつ終息するんでしょうか。<br>これからもっとひどくなるんでしょうか・・・？</p><p>20200412</p><p>Makefileをgccで統一しました。<br>gccでも鍵を並列生成が可能です。<br>実験環境では約一分でした。</p><p>20200413</p><p>鍵生成をdetaにした時、正しく生成できないバグを発見。<br>現在デバッグ中。<br>clangでコンパイルしたときはエラー訂正に失敗しないのですが、gccでコンパイルすると１０分もしないでエラーで止まります。<br>しかも再現性のないエラーなので、gccのバグのような感じです。<br>ただ、aoccのclangではO3オプションが未実装なため、公開鍵を作る処理が遅く、最適化しても３分以上かかります。<br>これがgccだと１分で終わります。<br>そういうわけで完全な答えはないのですが、エラーが怖い人は鍵生成にdetaを使わないで、detを使うようにしてください。<br>鍵生成は別ファイルにして、aoccのclangでコンパイルした専用のコマンドにするかもしれないです。<br>大本のclangをコンパイルインストールしてみましたが、鍵生成は遅いままです。どうやらgcc -O3に当たるオプションは未実装のようです。<br>もし鍵生成を早くしたいのであればgccを指定してください。</p><p>20200416</p><p>clangによる鍵計算を高速化。<br>今まで3分30秒だった鍵計算処理を、pragma指定で2分短縮して1分40秒程度で完了できるようになった。<br>ちなみにgccは1分位。<br>そのまま実行するとスタックオーバーフローを起こすので、ulimit -s 16000と設定すること。<br>また、コンパイラはclangを使うことを強くおすすめする。<br>というのも、行列に複数のスレッドがアクセスしようとするときにclangは自動で排他制御をしているようなのだ。<br>一方gccの方は答えが一発で出ない。<br>繰り返して計算しているうちにclangと同じくらいの遅さになってしまう。<br>ここは正確さと速度の保証があるclangをおすすめしたい。<br>clangはaoccでなくても良いが、コンパイルにものすごく時間がかかるのでストレスになるかも。<br>でも計算結果は正確なのでおすすめする。</p><p>20200417</p><p>gccで鍵生成が1分4秒、clangで1分12秒位まで早くなった。<br>更新ファイルはlu.cのみ。</p><p>20200417</p><p>鍵生成の速度は昨日と変わらず。無理して早くすると正しい結果にならない。<br>今日は鍵生成から復号までの全体をチューニングした。</p><p>20200420</p><p>ダイエット中と体調不良により、暫くお休みします。<br>並列処理をするより、まず64ビット環境に最適化する必要があると思う。<br>何かいい方法が見つかったらやります。</p><p>２．作るに至った経緯</p><p>耐量子計算機暗号のコアの一つとして、古典的Goppa符号の復号法ができれば良い。ここでは暗号化に必要な関数を作りました。<br>現在のところ、2の拡大体に関する復号です。バグがあります。ベータバージョンです。マニュアルもまだ書いてません。<br>QC-MDPCなんか邪道だと思っているので、オーソドックスな実装にしました。実用に耐えるようなパラメータの実装はありませんでした。<br>あるにはあるのですが、外部ライブラリに頼った実装ばかりで、自己完結的に作成できるようなものがないので作りました。<br>現時点（20200306）では、バイナリ公開鍵には対応していません。</p><p>このコードを実装するのに使った書籍は、Oliver PretzelのError-Correcting Codes and Finite Fieldsです。</p><p>その他英語の論文についてはdiary.txtを参照してください。</p><p>このコードの最終目的は軍事レベルの暗号を作ることで、Niederreiter暗号を目指しています。鍵はでかいです。<br>毎月たくさんの新型が生まれている中で、なぜ改良版を使わないのかという人もいるかもしれませんが、<br>一番古いオーソドックスな技術が一番安全だし使えると思ってやっています。動かすときはLinuxでどうぞ。<br>コアダンプしないように作ってあるつもりです。（何らかの標準出力がある）<br>またブロックチェーン技術のためにネット上にあった自作でないSHA3を使い、電子署名モジュールは作るつもりです。<br>誰も作ってないようなので作りました。</p><p>実装は汚いコードですが、ポインタやオブジェクト指向を知らないので素人レベルのコードです。プロなら読めると思います。<br>全部で2000行くらいしかないです。<br>いつか勇者が現れて、私のコードを凌ぐ素晴らしいプログラムを作ってくれることを祈ります。<br>組み込み開発や、JavaScriptなんかにも直接移植できるのではないでしょうか。処理速度が遅いから無理かもしれないけど、<br>最適化は今後の課題です。まだプロセッサの能力をフルに発揮できていません。</p><p>残念ながらまだOpenMPには対応してません。<br>やり方が今一つよくわからないのですが、行列を並列計算させようとしても変な値になってしまいうまく並列化できません。<br>ちなみに開発環境は、LinuxでCPUはAMD　Ryzen7　2700Xです。マルチコアの意味がまるでないｗ。<br>ただその気になればパソコン用のCPUであれば、アセンブラマクロかなんかを使って、コア内で並列処理できると思います。<br>AMDのSIMDは遅いという評判ですがｗ。</p><p>参考文献を開発日記の別ファイルに移しました。今後ここにはマニュアル的なコードを書きたいと思います。</p><p>20200306（ひとことメモ）</p><p>機能拡張と計算結果の信頼性だけに注目しているので、全くコードを読む側のことを考えてません。<br>秘密鍵暗号を使って暗号化するのがいいか、ハッシュ関数を再帰的に使ってストリーム暗号のようにして使うかの比較。<br>実装が悪いのかあまりにも遅いので秘密鍵暗号やファイル暗号化はしないことに。</p><p>20200307</p><p>書くようなことでもないのだが、今のままでは鍵生成は遅く、並列化不可能。<br>AMD専用の最適化コンパイラclangを使って並列化できるところを並列化した。<br>自分の環境では33秒を切るくらいの時間で終わる。<br>特に用途はないので、ベンチマークにしてみてくださいｗ。<br>並列化オプションを外すと33秒後半。gccだと37秒位なので、いかにメーカー製のコンパイラが最適化しているか解る。<br>gccで速度が出ないということは基本的な設計から見直さないといけないのかもしれない。</p><p>20200318</p><p>いま高速化と最適化をしています。元からビックインディアンをリトルインディアンに直しているせいで鍵生成に無駄に時間がかかっています。<br>これは生成多項式が直感的に見やすくなるように次数の高い順から（配列の添字の小さい方から）代入をしているからで、これを改善すれば４倍くらい早くなりそうです。<br>といっても素人の実装なので期待しないでください。</p><p>20200320</p><p>最適化に挑戦してみました。バグトラップを外しでmakeで２７秒台を記録。</p><p>諸事情によりもう更新しません。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="2019/11/01/Hexo-Theme-Snail/"/>
      <url>2019/11/01/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-snail"><a href="#hexo-theme-snail" class="headerlink" title="hexo-theme-snail"></a>hexo-theme-snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>Hexo-theme-snail is a succinct hexo theme. It has two colors, light and star, that can be set according to your own preferences in the settings, and also has the functions of sharing and commenting. More features are under development.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>light color theme and star theme</li><li>diversified comment system</li><li>notice tips</li><li>share to other platforms (under development)</li><li>picture sharing (under development)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>Modify the value of <code>theme:</code> in <code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure></p><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>Replace the following information with your own.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>Put customized pictures in <code>img</code> directory.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure></p><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>If you don’t want to display it, you can delete it directly.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Dusign!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/ironman-draw.png</span>      <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/`</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># whether or not using Feature-Tags</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">1</span>              <span class="comment"># A tag will be featured if the size of it is more than this condition value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Blog"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://blog.csdn.net/d_Nail"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Web"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Github"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://github.com/dusign"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>See httpymls://github.com/imsun/gitment for detailed configuration method.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## This comment system is gitment</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## If there is no effect after modification, please empty the cache and try again.</span></span><br><span class="line"><span class="comment">## ⚠️ The following special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h2><p>V1.0</p><ul><li>fix the bugs</li><li>add comment system</li><li>add notice tips</li><li>add star sheme</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache License 2.0 Copyright(c) 2018-2020 <a href="https://github.com/dusign" target="_blank" rel="noopener">Dusign</a>   </p><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">hexo-theme-snail</a> is derived from <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Huxpro</a> Apache License 2.0. Copyright (c) 2015-2020 Huxpro</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-snail </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
